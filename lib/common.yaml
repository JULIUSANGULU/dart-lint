##
# Common lint rules which should be activated for any dart code
##
analyzer:
  strong-mode:
    implicit-casts: false
  errors:
    # treat missing required parameters as a warning (not a hint)
    missing_required_param: warning
    # treat missing returns as a warning (not a hint)
    missing_return: warning
    # allow having TODOs in the code
    todo: ignore

# Rules are in the same order (alphabetically) as documented at http://dart-lang.github.io/linter/lints
# and https://github.com/dart-lang/linter/blob/master/example/all.yaml
linter:
  rules:
    # Prevents accidental return type changes which results in a breaking API change.
    # Enforcing return type makes API changes visible in a diff
    # http://dart-lang.github.io/linter/lints/always_declare_return_types.html
    - always_declare_return_types

    # Single line if are fine
    # http://dart-lang.github.io/linter/lints/always_put_control_body_on_new_line.html
    # - always_put_control_body_on_new_line

    # Flutter widgets always put a Key as first optional parameter which breaks this rule
    # http://dart-lang.github.io/linter/lints/always_declare_return_types.html
    # - always_put_required_named_parameters_first

    # All non nullable named parameters should be and annotated with @required.
    # This allows API consumers to get warnings via lint rather than a crash a runtime.
    # Might become obsolete with Non-Nullable types in dart 2.5
    # http://dart-lang.github.io/linter/lints/always_require_non_null_named_parameters.html
    - always_require_non_null_named_parameters

    # Since dart 2.0 dart is a sound language, specifying types is not required anymore.
    # `var foo = 10;` is enough information for the compiler to make foo a int.
    # Makes code unnecessarily complex https://github.com/dart-lang/linter/issues/1620
    # http://dart-lang.github.io/linter/lints/always_specify_types.html
    # - always_specify_types

    # Protect against unintentionally overriding superclass members
    # http://dart-lang.github.io/linter/lints/annotate_overrides.html
    - annotate_overrides

    # All methods should define a return type. dynamic is no exception
    # http://dart-lang.github.io/linter/lints/avoid_annotating_with_dynamic.html
    # - avoid_annotating_with_dynamic

    # There are good reasons to use `as`, i.e. in operator ==() methods.
    # Too many false positives:
    # - http://dart-lang.github.io/linter/lints/avoid_as.html
    #
    # - avoid_as

    # Highlights boolean expressions which can be simplified
    # http://dart-lang.github.io/linter/lints/avoid_bool_literals_in_conditional_expressions.html
    - avoid_bool_literals_in_conditional_expressions

    # There are no strong arguments to enable this rule
    # http://dart-lang.github.io/linter/lints/avoid_catches_without_on_clauses.html
    # - avoid_catches_without_on_clauses

    # Errors aren't for catching but to prevent prior to runtime
    # http://dart-lang.github.io/linter/lints/avoid_catching_errors.html
    - avoid_catching_errors

    # Can usually be replaced with an extension
    # http://dart-lang.github.io/linter/lints/avoid_classes_with_only_static_members.html
    - avoid_classes_with_only_static_members

    # Only useful when targeting JS
    # http://dart-lang.github.io/linter/lints/avoid_double_and_int_checks.html
    # - avoid_double_and_int_checks

    # Prevents accidental empty else cases. See sample at:
    # http://dart-lang.github.io/linter/lints/avoid_empty_else.html
    - avoid_empty_else

    # Prevents unnecessary allocation of a field
    # http://dart-lang.github.io/linter/lints/avoid_field_initializers_in_const_classes.html
    - avoid_field_initializers_in_const_classes

    # Prevents allocating a lambda and allows return/break/continue control flow statements inside the loop
    # http://dart-lang.github.io/linter/lints/avoid_function_literals_in_foreach_calls.html
    - avoid_function_literals_in_foreach_calls

    # Don't break value types by implementing them
    # http://dart-lang.github.io/linter/lints/avoid_implementing_value_types.html
    - avoid_implementing_value_types

    # Removes redundant `= null;`
    # https://dart-lang.github.io/linter/lints/avoid_init_to_null.html
    - avoid_init_to_null

    # Only useful when targeting JS
    # Warns about too large integers when compiling to JS
    # https://dart-lang.github.io/linter/lints/avoid_js_rounded_ints.html
    # - avoid_js_rounded_ints

    # Null checks aren't required in ==() operators
    # https://dart-lang.github.io/linter/lints/avoid_null_checks_in_equality_operators.html
    - avoid_null_checks_in_equality_operators

    # Good APIs don't use ambiguous boolean parameters. Instead use named parameters
    # https://dart-lang.github.io/linter/lints/avoid_positional_boolean_parameters.html
    - avoid_positional_boolean_parameters

    # Always prefer function references over typedefs.
    # Jumping twice in code to see the signature of a lambda sucks. This is different from the flutter analysis_options
    # https://dart-lang.github.io/linter/lints/avoid_private_typedef_functions.html
    - avoid_private_typedef_functions

    # package or relative? Let's end the discussion and use package everywhere.
    # https://dart-lang.github.io/linter/lints/avoid_relative_lib_imports.html
    - avoid_relative_lib_imports

    # Not recommended to break dartdoc but besides that there is no reason to continue with bad naming
    # https://dart-lang.github.io/linter/lints/avoid_renaming_method_parameters.html
    # - avoid_renaming_method_parameters

    # Setters always return void, therefore defining void is redundant
    # https://dart-lang.github.io/linter/lints/avoid_return_types_on_setters.html
    - avoid_return_types_on_setters

    # Especially with Non-Nullable types on the horizon, `int?` is fine.
    # There are plenty of valid reasons to return null.
    # https://dart-lang.github.io/linter/lints/avoid_returning_null.html
    # - avoid_returning_null

    # Don't use `Future?`, therefore never return null instead of a Future.
    # Will become obsolete one Non-Nullable types land in dart 2.5
    # https://dart-lang.github.io/linter/lints/avoid_returning_null_for_future.html
    - avoid_returning_null_for_future

    # Use empty returns, don't show off with you knowledge about dart internals.
    # https://dart-lang.github.io/linter/lints/avoid_returning_null_for_void.html
    - avoid_returning_null_for_void

    # Hinting you forgot about the cascade operator. But too often you did this on purpose.
    # There are plenty of valid reasons to return this.
    # https://dart-lang.github.io/linter/lints/avoid_returning_this.html
    # - avoid_returning_this

    #
    #
    - avoid_setters_without_getters

    #
    #
    - avoid_shadowing_type_parameters

    #
    #
    - avoid_single_cascade_in_expression_statements

    # Might cause frame drops because of synchronous file access on mobile, especially on older phones with slow storage.
    # There are no known measurements sync access does *not* drop frames.
    # https://dart-lang.github.io/linter/lints/avoid_slow_async_io.html
    # - avoid_slow_async_io

    #
    #
    - avoid_types_as_parameter_names

    # Adding the type is not required, but sometimes improves readability. Therefore removing it doesn't always help
    # https://dart-lang.github.io/linter/lints/avoid_types_on_closure_parameters.html
    # - avoid_types_on_closure_parameters

    #
    #
    - avoid_unused_constructor_parameters

    #
    #
    - avoid_void_async

    #
    #
    - await_only_futures

    #
    #
    - camel_case_types

    #
    #
    - cancel_subscriptions

    # The cascade syntax is weird and you shouldn't be forced to use it.
    # False positives:
    # https://github.com/dart-lang/linter/issues/1589
    #
    # https://dart-lang.github.io/linter/lints/cascade_invocations.html
    # - cascade_invocations

    # False positives, not reliable enough
    # - https://github.com/dart-lang/linter/issues/1381
    #
    # https://dart-lang.github.io/linter/lints/close_sinks.html
    # - close_sinks

    # False positives:
    # - https://github.com/dart-lang/linter/issues/1142
    #
    # https://dart-lang.github.io/linter/lints/comment_references.html
    # - comment_references

    # Follow standard dart naming style
    # https://dart-lang.github.io/linter/lints/constant_identifier_names.html
    - constant_identifier_names

    #
    #
    - control_flow_in_finally

    #
    #
    - curly_braces_in_flow_control_structures

    # Still experimental and pretty much work when enforced
    # https://dart-lang.github.io/linter/lints/diagnostic_describe_all_properties.html
    # - diagnostic_describe_all_properties

    #
    #
    - directives_ordering

    #
    #
    - empty_catches

    #
    #
    - empty_constructor_bodies

    #
    #
    - empty_statements

    #
    #
    - file_names

    # Very flutter specific, not applicable for all projects
    # https://dart-lang.github.io/linter/lints/flutter_style_todos.html
    # - flutter_style_todos # not all todos require a ticket

    #
    #
    - hash_and_equals

    #
    #
    - implementation_imports

    # Although there are some false positives, this lint generally catches unnecessary checks
    # - https://github.com/dart-lang/linter/issues/811
    #
    # https://dart-lang.github.io/linter/lints/invariant_booleans.html
    - invariant_booleans

    #
    #
    - iterable_contains_unrelated_type

    #
    #
    - join_return_with_assignment

    #
    #
    - library_names

    #
    #
    - library_prefixes

    # Nobody wants to manually wrap lines when changing a few words. This rule is too hard to be a "general" rule
    # https://dart-lang.github.io/linter/lints/lines_longer_than_80_chars.html
    # - lines_longer_than_80_chars

    #
    #
    - list_remove_unrelated_type

    # Good for libraries to prevent unnecessary code paths.
    # False positives may occur for applications when boolean properties are generated by external programs
    # producing auto-generated source code
    #
    # Known issue: while(true) loops https://github.com/dart-lang/linter/issues/453
    #
    # https://dart-lang.github.io/linter/lints/literal_only_boolean_expressions.html
    # literal_only_boolean_expressions

    #
    #
    - no_adjacent_strings_in_list

    #
    #
    - no_duplicate_case_values

    #
    #
    - non_constant_identifier_names

    #
    #
    - null_closures

    # Types for local variables may improve readability.
    # https://dart-lang.github.io/linter/lints/omit_local_variable_types.html
    # - omit_local_variable_types

    # Defining interfaces (abstract classes), with only one method, makes sense architecture wise
    # https://dart-lang.github.io/linter/lints/one_member_abstracts.html
    - one_member_abstracts

    # Since Errors aren't intended to be caught (see avoid_catching_errors), throwing anything
    # doesn't cause trouble.
    # https://dart-lang.github.io/linter/lints/only_throw_errors.html
    # - only_throw_errors

    #
    #
    - overridden_fields

    #
    #
    - package_api_docs

    #
    #
    - package_names

    #
    #
    - package_prefixed_library_names

    #
    #
    - parameter_assignments

    #
    #
    - prefer_adjacent_string_concatenation

    #
    #
    - prefer_asserts_in_initializer_lists

    #
    #
    - prefer_collection_literals

    # Assertions blocks don't require a message because they throw simple to understand errors
    # https://dart-lang.github.io/linter/lints/prefer_asserts_with_message.html
    # - prefer_asserts_with_message

    #
    #
    - prefer_conditional_assignment

    #
    #
    - prefer_const_constructors

    #
    #
    - prefer_const_constructors_in_immutables

    #
    #
    - prefer_const_declarations

    #
    #
    - prefer_const_literals_to_create_immutables

    #
    #
    - prefer_constructors_over_static_methods

    #
    #
    - prefer_contains

    # Use whatever makes you happy. lint doesn't define a style
    # https://dart-lang.github.io/linter/lints/prefer_double_quotes.html
    # - prefer_double_quotes

    #
    #
    - prefer_equal_for_default_values

    # Single line methods + implementation makes it hard to write comments for that line.
    # Dense code isn't necessarily better code.
    # https://dart-lang.github.io/linter/lints/prefer_expression_function_bodies.html
    # - prefer_expression_function_bodies

    #
    #
    - prefer_final_fields

    #
    #
    - prefer_final_in_for_each

    #
    #
    - prefer_final_locals

    #
    #
    - prefer_for_elements_to_map_fromIterable

    # Dense code isn't necessarily better code
    # https://dart-lang.github.io/linter/lints/prefer_foreach.html
    # - prefer_foreach

    #
    #
    - prefer_function_declarations_over_variables

    #
    #
    - prefer_generic_function_type_aliases

    #
    #
    - prefer_if_elements_to_conditional_expressions

    #
    #
    - prefer_if_null_operators

    #
    #
    - prefer_initializing_formals

    #
    #
    - prefer_inlined_adds

    # There is no argument which makes int literals better than double literals for doubles.
    # https://dart-lang.github.io/linter/lints/prefer_int_literals.html
    # - prefer_int_literals

    #
    #
    - prefer_interpolation_to_compose_strings

    #
    #
    - prefer_is_empty

    #
    #
    - prefer_is_not_empty

    #
    #
    - prefer_iterable_whereType

    # Users of a 3rd party mixins can't change 3rd party code to use the mixin syntax.
    # This makes the rule useless
    # https://dart-lang.github.io/linter/lints/prefer_mixin.html
    # - prefer_mixin

    # Makes expressions with null checks easier to read.
    # https://github.com/flutter/flutter/pull/32711#issuecomment-492930932
    - prefer_null_aware_operators

    # Use whatever makes you happy. noexcuse doesn't define a style
    # https://dart-lang.github.io/linter/lints/prefer_single_quotes.html
    # - prefer_single_quotes

    #
    #
    - prefer_spread_collections

    #
    #
    - prefer_typing_uninitialized_variables

    #
    #
    - prefer_void_to_null

    #
    #
    - provide_deprecation_message

    # For packages only
    # https://dart-lang.github.io/linter/lints/public_member_api_docs.html
    # - public_member_api_docs

    #
    #
    - recursive_getters

    #
    #
    - slash_for_doc_comments

    #
    #
    - sort_child_properties_last

    #
    #
    - sort_constructors_first

    #
    #
    - sort_pub_dependencies

    #
    #
    - sort_unnamed_constructors_first

    #
    #
    - test_types_in_equals

    #
    #
    - throw_in_finally

    #
    #
    - type_annotate_public_apis

    #
    #
    - type_init_formals

    # Too many false positives.
    # Using the pedantic package for the unawaited function doesn't make code better readable
    #
    # https://dart-lang.github.io/linter/lints/unawaited_futures.html
    # - unawaited_futures

    #
    #
    - unnecessary_await_in_return

    #
    #
    - unnecessary_brace_in_string_interps

    #
    #
    - unnecessary_const

    #
    #
    - unnecessary_getters_setters

    # Flutter setState is a good example where a lambda should always be used.
    # https://github.com/dart-lang/linter/issues/498
    #
    # Some generic code sometimes requires lambdas, otherwise the generic type isn't forwarded correctly.
    #
    # https://dart-lang.github.io/linter/lints/unnecessary_lambdas.html
    # - unnecessary_lambdas

    #
    #
    - unnecessary_new

    #
    #
    - unnecessary_null_aware_assignments

    #
    #
    - unnecessary_null_in_if_null_operators

    #
    #
    - unnecessary_overrides

    #
    #
    - unnecessary_parenthesis

    #
    #
    - unnecessary_statements

    #
    #
    - unnecessary_this

    #
    #
    - unrelated_type_equality_checks

    # Always use hex syntax Color(0x00000001), never Color(1).
    # https://dart-lang.github.io/linter/lints/use_full_hex_values_for_flutter_colors.html
    - use_full_hex_values_for_flutter_colors

    # Always use generic function type syntax, don't mix styles
    # https://dart-lang.github.io/linter/lints/use_function_type_syntax_for_parameters.html
    - use_function_type_syntax_for_parameters

    # Web only
    # https://dart-lang.github.io/linter/lints/unsafe_html.html
    # - unsafe_html

    #
    #
    - use_rethrow_when_possible

    #
    #
    - use_setters_to_change_properties

    # In most cases, using a string buffer is preferred for composing strings due to its improved performance.
    # https://dart-lang.github.io/linter/lints/use_string_buffers.html
    - use_string_buffers

    # Naming is hard, strict rules don't help
    # https://dart-lang.github.io/linter/lints/use_to_and_as_if_applicable.html
    # - use_to_and_as_if_applicable

    #
    #
    - valid_regexps

    #
    #
    - void_checks
